collection ka kaam hai multiple data ko store karna

array --- it is homogenous in nature
array is fixed in size 


collection ---- it is hetrogenous in nature 
collection is dynamic in nature 

arrays --- it is a util class ---- so we do Arrays.sort();


like if we want to reverse a array..we have to do by writing manual method
but in the case of collection---- there are inbuild memthods



Collections ka parent method ----


----------------------✅ Top-Level Hierarchy:-----------------
                        java.lang.Object
                                ↑
                        java.util.Collection (Interface)




-----------------------------🔷 Collection Interface Hierarchy Breakdown:--------------------------
                                       
                                                Collection (I)
                                                /     |      \
                                                /      |       \
                                            List     Set     Queue  ← interfaces ---- these three are also interface.....
                                            |        |        |
                                        ArrayList HashSet  LinkedList
                                        LinkedList LinkedHashSet PriorityQueue
                                        Vector     TreeSet   ArrayDeque
                                        Stack

                                        Note: Map is not part of Collection.

Collection is a Interface --- not class

----------------------------------------------------------------------------------------------------------


                                    -----------------🔸 1. Collection (Interface)
                                                    Root interface for most data structures in Java.    




                                    ---------------🔸 2. List (Interface)
                                                    Ordered, allows duplicates, indexed.

                                                    Class	Description
                                                    ArrayList	Resizable array, fast random access
                                                    LinkedList	Doubly linked list
                                                    Vector	Synchronized, legacy
                                                    Stack	LIFO stack, extends Vector




                                    ---------------🔸 3. Set (Interface)
                                                    Unordered, no duplicates.
                                                    Class	Description
                                                    HashSet	No order, uses hash table
                                                    LinkedHashSet	Maintains insertion order
                                                    TreeSet	Sorted set (uses TreeMap internally)


                                    ---------------🔸 4. Queue (Interface)
                                                    Follows FIFO or priority-based ordering.
                                                    Class	Description
                                                    LinkedList	Implements both List and Queue
                                                    PriorityQueue	Orders elements based on priority
                                                    ArrayDeque	Resizable-array implementation





                                                        🔸 Map (Separate Hierarchy — Not under Collection)


                                                                    Map (Interface)
                                                                    ├── HashMap
                                                                    ├── LinkedHashMap
                                                                    └── TreeMap


                                                                

-----------------------------------🧠 Summary Diagram ----------------------------

                                        Collection
                                        ├── List
                                        │   ├── ArrayList
                                        │   ├── LinkedList
                                        │   ├── Vector
                                        │   └── Stack
                                        ├── Set
                                        │   ├── HashSet
                                        │   ├── LinkedHashSet
                                        │   └── TreeSet
                                        └── Queue
                                            ├── LinkedList
                                            ├── PriorityQueue
                                            └── ArrayDeque






-------------------------SYNCHRONIZATION AND MULTITHREADING-----------------

like when we want to give biryani to a dog..
like multiple dogs are there to eat biryani...

now the biryani is data and dogs are thread
so if multiple dogs are eating biryani..then the biryani is lost


THIS IS SIMILAR TO MULTITHREADING 
like if there is multithreading..then the data will get lost...

like if there are multiplethreads...then data will be lost..
and in order to preserve it... like feeding each dog one by one..
this is known as SYNCHRONIZATION


like if we want to save data..then we use SYNCHRONIZATION which will execute multiple thread one by one



memory threading --- multiple threads are executed at same time
synchornization --- multiple thread one by one  --- but it would increase the time complexicity 






-----------------------------ARRAYLIST ---------------------
                arraylist is a dynamic array 
                vector is a legacy collection 
                legacy colleciton --- when first hand java was introduced..... 1995 ----
                in the first version of java.... all the features was legacy 
                like vector was introduced in the first version of java.. so vector is a legacy collection 




arraylist --- like it has index



✅ Key Differences Between LinkedList and ArrayList

Feature	                            ArrayList	                         LinkedList
Underlying Data Structure	       Dynamic array               	        Doubly linked list
Access Time (get/set)	            Fast – O(1) (random access)	        Slow – O(n) (needs traversal)
Insertion at end	                Fast – Amortized O(1)	            Fast – O(1)
Insertion in middle/start	        Slow – O(n) (shift needed)          Fast – O(1) if at head, O(n) otherwise
Deletion from end	                Fast – O(1)	                        Fast – O(1)
Deletion from middle/start	        Slow – O(n)	                        Fast – O(1) if at head, O(n) otherwise
Memory use	                        Less memory (just data)	            More memory (data + 2 pointers)
Iteration performance	            Better (cache friendly)	             Slower




🟢 When to Use ArrayList

Use ArrayList when:
You need fast random access using indexes (e.g., get(i)).
Your application does more reads than insertions/deletions.
You frequently add/remove elements at the end of the list.

📌 Example:

ArrayList<String> names = new ArrayList<>();
names.add("Alice");  // fast
names.get(0);        // fast




🔵 When to Use LinkedList

Use LinkedList when:
You need to frequently insert or delete elements from the beginning or middle of the list.
You don't need fast access by index.

📌 Example:

LinkedList<String> queue = new LinkedList<>();
queue.addFirst("Job1");  // fast
queue.removeLast();      // fast



capacity in arraylist --- CurrentCapacity *3/2  +1 
FieldRatio is not in this


by defualt ...we get 16 elements in HashMap and HashSet 
filedRation --- like for example if we say field ratio is 0.9 
this means that if 90% of size of hashset or hashmap...then the size will increase 

BY DEFAULT -- FILED-RATION -- 75% 
SO IF 12 ELEMENTS ARE FILLED..THEN ITS SIZE WILL INCREASE 



in arraylist -- 
sorting technique is not allowed 
not synchronized method 
time complexicity reduced --- 
